<?php

namespace Fobia;

class TableSheet2 extends TableSheet
{

    public static function getProg($prog)
    {
        return parent::getProg($prog);
    }

    public static function isWin()
    {
        return parent::isWin();
    }

}

define("DATA_DIR", dirname(__FILE__) . '/../../data');
define("FIXED_CSV", dirname(__FILE__) . '/../../data/fixed.csv');
define("TMP_CSV", dirname(__FILE__) . '/../../tmp-1.csv');
define("TMP_XLS", dirname(__FILE__) . '/../../tmp-1.xls');

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-03-31 at 12:42:36.
 */
class TableSheetTest extends \PHPUnit_Framework_TestCase
{

    protected $head = array('Артикул', 'Наименование');
    protected function getHead()
    {
        $handle = fopen(TMP_CSV, 'r');
        $row = fgetcsv($handle);
        return array_slice($row, 0, 2);
    }

    protected function tearDown()
    {
        @unlink(TMP_CSV);
        @unlink(TMP_XLS);
    }

    public function testIsWin()
    {
        $this->assertEquals(false, TableSheet2::isWin());
    }

    public function testGetProgn()
    {
        $p = sprintf("@^/usr/bin/python .*?%s csv$@", TableSheet::CMD_EXEC_FILE);
        $r = (bool) preg_match($p, TableSheet2::getProg('csv'));
        $this->assertEquals(true, $r);
    }

    /**
     * @dataProvider filesProvider
     */
    public function testAllFiles($file)
    {
        $f = DATA_DIR . '/' . $file;
        $this->assertEquals(true, TableSheet::toCSV($f, TMP_CSV));

       // echo file_get_contents(TMP_CSV);

        $this->assertEquals($this->head, $this->getHead());
    }

    public function filesProvider()
    {
        return array(
            array('файл.csv'),
            array('cp1251.csv'),
            array('excel2003.xls'),
            array('excel2003a.xls'),
            array('excel2007.xlsx'),
            array('excel2007a.xlsx'),
            array('fake.xlsx'),
            array('fixed.csv'),
            // array('long.xlsx'),
            array('table.html'),
        );
    }


    public function testToCsvOneRus()
    {
        $f = DATA_DIR . '/файл.csv';
        $this->assertEquals(true, TableSheet::toCSV($f, TMP_CSV));

        $l1 = file(TMP_CSV);
        $l2 = file(FIXED_CSV);

        $this->assertEquals($l1[0], $l2[0]);
        $this->assertEquals(file_get_contents(TMP_CSV), file_get_contents(FIXED_CSV));
    }   /**/


    public function testToXlsDefault()
    {
        $this->assertEquals(true, TableSheet::toXls(FIXED_CSV, TMP_XLS));
        $this->assertEquals(true, TableSheet::toCSV(TMP_XLS, TMP_CSV));
        $this->assertEquals($this->head, $this->getHead());
    }

    public function testToXlsSheetname()
    {
        $this->assertEquals(true, TableSheet::toXls(FIXED_CSV, TMP_XLS, array( "sheetname" => "Sheet2")));
        $this->assertEquals(true, TableSheet::toCSV(TMP_XLS, TMP_CSV));
        $this->assertEquals($this->head, $this->getHead());
    }

    public function testToXlsColor()
    {
        $this->assertEquals(true, TableSheet::toXls(FIXED_CSV, TMP_XLS, array( "head_color" => 'yellow')));
        $this->assertEquals(true, TableSheet::toCSV(TMP_XLS, TMP_CSV));
        $this->assertEquals($this->head, $this->getHead());
    }

    public function testToXlsForse()
    {
        $f = dirname(FIXED_CSV) . '/fake.xlsx';
        $this->assertEquals(true, TableSheet::toXls($f, TMP_XLS, array( "forse" => true)));
        $this->assertEquals(true, TableSheet::toCSV(TMP_XLS, TMP_CSV));
        $this->assertEquals($this->head, $this->getHead());
    }
}
